{"mappings":"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","sources":["./src/helpers/formatStars.ts","./src/helpers/createRepositoryNode.ts","./src/helpers/starredRepositories.ts","./src/helpers/initLanguageFilter.ts","./src/helpers/initStarredFilter.ts","./src/index.ts","./src/helpers/loadRepositories.ts","./src/helpers/getLanguagesFromRepositories.ts"],"sourcesContent":["const formatStars = new Intl.NumberFormat(\n  document.querySelector('html')?.lang || navigator.language,\n).format;\n\nexport default formatStars;\n","import formatStars from './formatStars';\nimport { Repository } from './types';\n\nconst template = document.getElementById('list-item') as HTMLTemplateElement;\n\nconst createRepositoryNode = (\n  repository: Repository,\n  starred = false,\n): DocumentFragment => {\n  const clone = document.importNode(template.content, true);\n\n  const item = clone.querySelector('.RepositoryListItem') as HTMLElement;\n\n  item.dataset.id = repository.id.toString();\n\n  if (repository.language) {\n    item.dataset.language = repository.language;\n  }\n\n  if (starred) {\n    item.classList.add('RepositoryListItem--starred');\n  }\n\n  (clone.querySelector('.repository-link') as HTMLAnchorElement).href =\n    repository.html_url;\n\n  (clone.querySelector('.owner-name') as HTMLElement).textContent =\n    repository.owner.login;\n\n  (clone.querySelector('.repository-name') as HTMLElement).textContent =\n    repository.name;\n\n  (clone.querySelector('.description') as HTMLElement).textContent =\n    repository.description;\n\n  (clone.querySelector('.language') as HTMLElement).textContent =\n    repository.language;\n\n  const starsNode = clone.querySelector('.stars') as HTMLElement;\n  const stars = repository.stargazers_count + (starred ? 1 : 0);\n\n  starsNode.dataset.stars = stars.toString();\n  starsNode.textContent = formatStars(stars);\n\n  return clone;\n};\n\nexport default createRepositoryNode;\n","const storageKey = 'starred';\n\nexport const loadStarredRepositories = (): Record<string, true> => {\n  const item = localStorage.getItem(storageKey);\n\n  if (!item) {\n    return {};\n  }\n\n  return JSON.parse(item);\n};\n\nexport const saveStarredRepositories = (\n  starredRepositories: Record<string, true | undefined>,\n) => {\n  localStorage.setItem(storageKey, JSON.stringify(starredRepositories));\n};\n","const languageSelect = document.getElementById(\n  'language-select',\n) as HTMLSelectElement;\n\nconst languageFilterSheet = document.head.appendChild(\n  document.createElement('style'),\n);\n\nconst initLanguageFilter = (list: HTMLElement, languages: string[]) => {\n  languageSelect.addEventListener('change', (event) => {\n    const { value } = event.target as HTMLInputElement;\n\n    list.dataset.language = value;\n  });\n\n  languageFilterSheet.textContent = languages\n    .map(\n      (language) => `\n        .RepositoryList[data-language=\"${language}\"] .RepositoryListItem:not([data-language=\"${language}\"]) {\n            display: none;\n        }`,\n    )\n    .join('');\n\n  const languageOptions = languages.map((language) => {\n    const el = document.createElement('option');\n\n    el.textContent = language;\n\n    return el;\n  });\n\n  const options = new DocumentFragment();\n\n  options.append(...languageOptions);\n\n  languageSelect.appendChild(options);\n};\n\nexport default initLanguageFilter;\n","const starredCheckbox = document.getElementById(\n  'starred-checkbox',\n) as HTMLInputElement;\n\nconst initStarredFilter = (list: HTMLElement) => {\n  starredCheckbox.addEventListener('change', (event) => {\n    list.classList.toggle(\n      'RepositoryList--starred',\n      (event.target as HTMLInputElement).checked,\n    );\n  });\n};\n\nexport default initStarredFilter;\n","import createRepositoryNode from './helpers/createRepositoryNode';\nimport formatStars from './helpers/formatStars';\nimport loadRepositories from './helpers/loadRepositories';\nimport {\n  loadStarredRepositories,\n  saveStarredRepositories,\n} from './helpers/starredRepositories';\nimport getLanguagesFromRepositories from './helpers/getLanguagesFromRepositories';\nimport initLanguageFilter from './helpers/initLanguageFilter';\nimport initStarredFilter from './helpers/initStarredFilter';\n\nconst list = document.getElementById('list') as HTMLElement;\nconst info = document.getElementById('info') as HTMLElement;\n\nloadRepositories()\n  .then((repositories) => {\n    initStarredFilter(list);\n\n    const languages = getLanguagesFromRepositories(repositories);\n\n    initLanguageFilter(list, languages);\n\n    const starredRepositories = loadStarredRepositories();\n\n    const listItems = repositories.map((repository) =>\n      createRepositoryNode(repository, starredRepositories[repository.id]),\n    );\n\n    const fragment = new DocumentFragment();\n\n    fragment.append(...listItems);\n    list.appendChild(fragment);\n\n    list.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n\n      if (!target.closest('.btn--star')) {\n        return;\n      }\n\n      const item = target.closest('.RepositoryListItem') as HTMLElement;\n      const starred = item.classList.toggle('RepositoryListItem--starred');\n\n      const starredRepositories = loadStarredRepositories();\n\n      saveStarredRepositories({\n        ...starredRepositories,\n        [item.dataset.id as string]: starred || undefined,\n      });\n\n      const starsNode = item.querySelector('.stars') as HTMLElement;\n\n      const stars = Number(starsNode.dataset.stars) + (starred ? 1 : -1);\n\n      starsNode.dataset.stars = stars.toString();\n      starsNode.textContent = formatStars(stars);\n    });\n\n    list.removeChild(info);\n  })\n  .catch((error) => {\n    (document.getElementById('loader') as HTMLElement).hidden = true;\n\n    const errorElement = document.getElementById('error') as HTMLElement;\n\n    errorElement.hidden = false;\n    errorElement.textContent = error.toString();\n  });\n","import { Repository } from './types';\n\nconst loadRepositories = async (): Promise<Repository[]> => {\n  const now = new Date();\n  const lastWeek = new Date(now);\n\n  lastWeek.setDate(now.getDate() - 7);\n\n  try {\n    const response = await fetch(\n      `https://api.github.com/search/repositories?q=created:>${lastWeek.toISOString()}&sort=stars&order=desc&per_page=100`,\n    );\n\n    const json = await response.json();\n\n    return json.items;\n  } catch (e) {\n    throw new Error('Unable to load repositories');\n  }\n};\n\nexport default loadRepositories;\n","import { Repository } from './types';\n\nconst getLanguagesFromRepositories = (repositories: Repository[]): string[] => {\n  const languages = repositories.map((repository) => repository.language);\n\n  return [...new Set(languages)]\n    .filter((language): language is string => typeof language === 'string')\n    .sort();\n};\n\nexport default getLanguagesFromRepositories;\n"],"names":["formatStars","Intl","NumberFormat","document","querySelector","lang","navigator","language","format","template","getElementById","storageKey","loadStarredRepositories","item","localStorage","getItem","JSON","parse","languageSelect","languageFilterSheet","head","appendChild","createElement","starredCheckbox","list","info","async","now","Date","lastWeek","setDate","getDate","response","fetch","toISOString","json","items","e","Error","$ac2246f74a2666ed072f7623e42ff1$export$default","then","repositories","addEventListener","event","classList","toggle","target","checked","languages","map","repository","Set","filter","sort","$dbe01bc002673f7d49a4b08fb7a3$export$default","value","dataset","textContent","join","languageOptions","el","options","DocumentFragment","append","$c2ed00b6336d924cca4ed002e655fde4$export$default","starredRepositories","$fa19e8cd65075ed6c2dc2f920fbe70e$export$loadStarredRepositories","listItems","starred","clone","importNode","content","id","toString","add","href","html_url","owner","login","name","description","starsNode","stars","stargazers_count","$d24dee28a42426c5924387e6a3c09$export$default","$d2066f1927d722798d795fa652bb2d$export$default","fragment","closest","setItem","stringify","$fa19e8cd65075ed6c2dc2f920fbe70e$export$saveStarredRepositories","[object Object]","undefined","Number","removeChild","catch","error","hidden","errorElement"],"version":3,"file":"index.6031e217.js.map"}